.. _Developer_Guide:

#########################
Developer Guide
#########################

This GUI is constructed on the top of Qt framework (`Qt for Python <https://wiki.qt.io/Qt_for_Python>`_).

.. _Dependencies:

Dependencies
============

* `ts_xml <https://github.com/lsst-ts/ts_xml>`_
* `ts_guitool <https://github.com/lsst-ts/ts_guitool>`_
* `ts_tcpip <https://github.com/lsst-ts/ts_tcpip>`_
* `ts_salobj <https://github.com/lsst-ts/ts_salobj>`_
* `ts_hexrotcomm <https://github.com/lsst-ts/ts_hexrotcomm>`_

.. _Architecture:

Architecture
=============

The classes in module are listed below.

.. _lsst.ts.rotgui-modules_rotgui:

rotgui
------

.. mermaid:: ../uml/class_rotgui.mmd
    :caption: Class diagram of rotator GUI

* **MainWindow** is the main window of the application.
* **Model** contains the main business logic in the application.
* **ControlPanel** has the commands to control the controller.
* **Config** is a data class that has the configuration details in the rotator control system.
* **Status** is a data class that has the current controller status.
* **CommandTelemetryClient** is the controller to communicate with the low-level controller.
* **MockController** is the mock controller to support the simulation mode.

The model–view–controller (MVC) architecture is used in this module.
In this design, the view always shows the data sent from the model.
This helps minimize the business logic in view and makes testing easier.

The `Qt signal <https://doc.qt.io/qt-6/signalsandslots.html>`_ is used to do the data exchange.
The `emit()` and `connect()` in the class diagrams mean the class **emits** a specific signal and **connects** it to a specific callback function.
Signals are held and emitted from the **Model** to simplify the management of signals.

Qt provides its event loop that is different from the event loop in Python `asyncio <https://docs.python.org/3/library/asyncio.html>`_ library.
The `qasync <https://github.com/CabbageDevelopment/qasync>`_ allows coroutines (`async/await` keywords) to be used in PyQt/PySide applications by providing an implementation of the PEP-3156 event-loop.
For the other tasks in a loop to run, an awaitable must be called from another coroutine.
This allow for the coroutine to claim CPU and performs its operations.
Therefore `await asyncio.sleep()` calls are placed in unit tests calls, so the signal handling etc. can occur.

.. _lsst.ts.rotgui-modules_rotgui_signals:

rotgui.signals
--------------

The available Qt signals are listed below:

* **SignalState** sends the current controller's state..
* **SignalApplicationStatus** sends the current application status and
    Simulink flags.
* **SignalPositionVelocity** sends the current position and velocity of
    rotator.
* **SignalPower** sends the current current and voltage.
* **SignalControl** sends the commands of the actuators.
* **SignalDrive** sends the current drive status.
* **SignalConfig** sends the current configuration.

.. _lsst.ts.rotgui-modules_rotgui_tab:

rotgui.tab
----------

.. mermaid:: ../uml/tab/class_tab.mmd
    :caption: Class diagram of tab module

* **TabDriveStatus** shows the Copley drive status.
* **TabPosition** shows the rotator position and velocity.
* **TabSettings** shows the settings of GUI.
* **TabTelemetry** shows the telemetry of controller.
* **TabPower** shows the power status.
* **TabConfig** shows the configuration.

The class diagrams for each table class are listed below to give you the idea of class relationship.

.. _lsst.ts.rotgui-modules_rotgui_tab_drive_status:

rotgui.tab.TabDriveStatus
-------------------------

.. mermaid:: ../uml/tab/class_tab_drive_status.mmd
    :caption: Class diagram of TabDriveStatus class

.. _lsst.ts.rotgui-modules_rotgui_tab_position:

rotgui.tab.TabPosition
----------------------

.. mermaid:: ../uml/tab/class_tab_position.mmd
    :caption: Class diagram of TabPosition class

.. _lsst.ts.rotgui-modules_rotgui_tab_settings:

rotgui.tab.TabSettings
----------------------

.. mermaid:: ../uml/tab/class_tab_settings.mmd
    :caption: Class diagram of TabSettings class

.. _lsst.ts.rotgui-modules_rotgui_tab_telemetry:

rotgui.tab.Telemetry
--------------------

.. mermaid:: ../uml/tab/class_tab_telemetry.mmd
    :caption: Class diagram of TabTelemetry class

.. _lsst.ts.rotgui-modules_rotgui_tab_power:

rotgui.tab.Power
--------------------

.. mermaid:: ../uml/tab/class_tab_power.mmd
    :caption: Class diagram of TabPower class

.. _lsst.ts.rotgui-modules_hexgui_tab_config:

rotgui.tab.Config
--------------------

.. mermaid:: ../uml/tab/class_tab_config.mmd
    :caption: Class diagram of TabConfig class

.. _API:

APIs
=============

This section is autogenerated from docstrings.

.. automodapi:: lsst.ts.rotgui
    :no-inheritance-diagram:
